global:
  image:
    registry: null
  priorityClassName: null
  clusterDomain: "cluster.local"
  dnsService: "coredns"
  dnsNamespace: "kube-system"
loki:
  readinessProbe:
    initialDelaySeconds: 30
    timeoutSeconds: 3
  config: |
    {{- if .Values.enterprise.enabled}}
    {{- tpl .Values.enterprise.config . }}
    {{- else }}
    auth_enabled: {{ .Values.loki.auth_enabled }}
    {{- end }}

    {{- with .Values.loki.server }}
    server:
      {{- toYaml . | nindent 2}}
    {{- end}}

    {{- with .Values.loki.ingester }}
    ingester:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- if .Values.loki.commonConfig}}
    common:
    {{- toYaml .Values.loki.commonConfig | nindent 2}}
      storage:
      {{- include "loki.commonStorageConfig" . | nindent 4}}
    {{- end}}

    {{- with .Values.loki.limits_config }}
    limits_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml

    {{- with .Values.loki.redis.chunk_cache }}
    {{- if and .enabled (or .endpoint) }}
    chunk_store_config:
      chunk_cache_config:
        redis:
          endpoint: {{ .endpoint }}
          timeout: {{ .timeout }}
          username: {{ .username }}
          password: {{ .password }}
          master_name: {{ .master_name }}
          expiration: {{ .expiration }}
    {{- end }}
    {{- end }}

    {{- if .Values.loki.schemaConfig}}
    schema_config:
    {{- toYaml .Values.loki.schemaConfig | nindent 2}}
    {{- else }}
    schema_config:
      configs:
        - from: 2022-01-11
          store: boltdb-shipper
          object_store: {{ .Values.loki.storage.type }}
          schema: v12
          index:
            prefix: loki_index_
            period: 24h
    {{- end }}

    {{ include "loki.rulerConfig" . }}

    table_manager:
      retention_deletes_enabled: false
      retention_period: 0

    {{- with .Values.loki.redis.results_cache }}
    query_range:
      align_queries_with_step: true
      {{- if and .enabled (or .endpoint) }}
      cache_results: {{ .enabled }}
      results_cache:
        cache:
          default_validity: {{ .default_validity }}
          redis:
            endpoint: {{ .endpoint }}
            timeout: {{ .timeout }}
            username: {{ .username }}
            password: {{ .password }}
            master_name: {{ .master_name }}
            expiration: {{ .expiration }}
      {{- end }}
    {{- end }}

    {{- with .Values.loki.storage_config }}
    storage_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.query_scheduler }}
    query_scheduler:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.compactor }}
    compactor:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.analytics }}
    analytics:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.querier }}
    querier:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.index_gateway }}
    index_gateway:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.frontend }}
    frontend:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.frontend_worker }}
    frontend_worker:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}
  auth_enabled: true
  server:
    http_listen_port: 3100
    grpc_listen_port: 9095
    tls_min_version: "VersionTLS12"
    grpc_server_max_concurrent_streams: 300
  limits_config:
    enforce_metric_name: false
    reject_old_samples: true
    reject_old_samples_max_age: 168h
    max_cache_freshness_per_query: 10m
    split_queries_by_interval: 15m
    max_global_streams_per_user: 10000
  commonConfig:
    path_prefix: /var/loki
    replication_factor: 3
    compactor_address: '{{ include "loki.compactorAddress" . }}'
    ring:
      kvstore:
        store: "etcd"
        etcd:
          endpoints: [loki-etcd.loki.svc.cluster.local:2379]
          dial_timeout: 10s
          max_retries: 5
          tls_enabled: false
          tls_cert_path: ""
          tls_key_path: ""
          tls_ca_path: ""
          tls_insecure_skip_verify: true
          #username: "root"
          #password: "ee0^XuFNHMiQ"
  storage:
    bucketNames:
      chunks: pre-apm
      ruler: pre-apm
      admin: pre-apm
    type: s3
    s3:
      s3: "pre-apm.obs.cn-north-4.myhuaweicloud.com"
      endpoint: "obs.cn-north-4.myhuaweicloud.com"
      secretAccessKey: "mVxBGdHbhNz2IJroV3sSSUVnVOsRYfLIOfeLl24Q"
      accessKeyId: "BGTXWSHTOQAXXCRMHTYH"
      region: "north-4"
      insecure: false
      http_config: {}
  redis:
    chunk_cache:
      enabled: true
      #endpoint: "10.0.2.117:26383,10.0.2.118:26383,10.0.2.119:26383"
      endpoint: "loki-redis-redis-cluster.loki.svc.cluster.local:6379"
      #master_name: "mymaster"
      timeout: 1s
      expiration: 0
      #username: ""
      password: "ycPA85aIbm"
    results_cache:
      enabled: true
      endpoint: "10.0.2.117:26383,10.0.2.118:26383,10.0.2.119:26383"
      master_name: "mymaster"
      timeout: 1s
      expiration: 0
      username: ""
      password: "ee@redis^#**"
      default_validity: 1h
  schemaConfig: {}
  rulerConfig: {}
  structuredConfig: {}
  query_scheduler: {}
  storage_config:
    hedging:
      at: "250ms"
      max_per_second: 20
      up_to: 3
  compactor: {}
  analytics: {}
  querier: {}
  ingester: {}
  index_gateway:
    mode: ring
  frontend:
    scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'
  frontend_worker:
    scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'

write:
  replicas: 3
  targetModule: "write"
  terminationGracePeriodSeconds: 300
  podManagementPolicy: "Parallel"
  persistence:
    size: 10Gi
    storageClass: "csi-disk-topology"

read:
  replicas: 3
  targetModule: "read"
  terminationGracePeriodSeconds: 30
  persistence:
    size: 10Gi
    storageClass: "csi-disk-topology"

backend:
  replicas: 3
  targetModule: "backend"
  resources: {}
  terminationGracePeriodSeconds: 300
  podManagementPolicy: "Parallel"
  persistence:
    size: 10Gi
    storageClass: "csi-disk-topology"

gateway:
  enabled: true
  replicas: 1
  verboseLogging: true
  deploymentStrategy:
    type: RollingUpdate
  image:
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    tag: 1.19-alpine
    digest: null
    pullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 30
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
  nginxConfig:
    logFormat: |-
      main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    serverSnippet: ""
    httpSnippet: >-
      {{ if .Values.loki.tenants }}proxy_set_header X-Scope-OrgID $remote_user;{{ end }}
    customReadUrl: null
    customWriteUrl: null
    customBackendUrl: null
    file: |
      {{- include "loki.nginxFile" . | indent 2 -}}
tracing:
  jaegerAgentHost: ""
