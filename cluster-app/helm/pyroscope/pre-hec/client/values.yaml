agent:
  mode: 'flow'
  configMap:
    create: true
    content: |
      logging {
        level  = "info"
        format = "logfmt"
      }

      discovery.kubernetes "pods" {
        role = "pod"

        namespaces {
          names = ["sit13", "uat14", "im", "eeo", "pyroscope", "monitoring", "prometheus", "tempo", "loki"]
        }

        selectors {
          role = "pod"
          label = "apptype=go,business=classin"
          field = "spec.nodeName=" + coalesce(env("HOSTNAME"), constants.hostname)
        }
      }

      discovery.relabel "kubernetes_pods" {
        targets = concat(discovery.kubernetes.pods.targets)

        rule {
          action        = "drop"
          source_labels = ["__meta_kubernetes_pod_phase"]
          regex         = "Pending|Succeeded|Failed|Completed"
        }

        rule {
          action        = "replace"
          source_labels = ["__meta_kubernetes_namespace"]
          target_label  = "namespace"
        }

        rule {
          action        = "replace"
          source_labels = ["__meta_kubernetes_pod_name"]
          target_label  = "pod"
        }
        rule {
            source_labels = ["__meta_kubernetes_pod_label_app"]
            action = "replace"
            target_label = "app"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_label_deploy"]
            action = "replace"
            target_label = "deploy"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_label_lane"]
            action = "replace"
            target_label = "lane"
          }
      }

      discovery.relabel "kubernetes_pods_memory_default_name" {
        targets = concat(discovery.relabel.kubernetes_pods.output)

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scrape"]
          action        = "keep"
          regex         = "true"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port_name"]
          action        = "keep"
          regex         = ""
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_scheme"]
          action        = "replace"
          regex         = "(https?)"
          target_label  = "__scheme__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_path"]
          action        = "replace"
          regex         = "(.+)"
          target_label  = "__profile_path__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_memory_port"]
          action        = "replace"
          regex         = "(.+?)(?::\\d+)?;(\\d+)"
          target_label  = "__address__"
          replacement   = "$1:$2"
        }
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action        = "keep"
          regex         = "(business)"
        }
      }


      pyroscope.scrape "pyroscope_scrape_memory" {

        targets    = concat(discovery.relabel.kubernetes_pods_memory_default_name.output)
        forward_to = [pyroscope.write.distributor.receiver]

        profiling_config {
          profile.memory {
            enabled = true
          }

          profile.process_cpu {
            enabled = false
          }

          profile.goroutine {
            enabled = false
          }

          profile.block {
            enabled = false
          }

          profile.mutex {
            enabled = false
          }

          profile.fgprof {
            enabled = false
          }
        }
      }

      discovery.relabel "kubernetes_pods_cpu_default_name" {
        targets = concat(discovery.relabel.kubernetes_pods.output)

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scrape"]
          action        = "keep"
          regex         = "true"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port_name"]
          action        = "keep"
          regex         = ""
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_scheme"]
          action        = "replace"
          regex         = "(https?)"
          target_label  = "__scheme__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_path"]
          action        = "replace"
          regex         = "(.+)"
          target_label  = "__profile_path__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_cpu_port"]
          action        = "replace"
          regex         = "(.+?)(?::\\d+)?;(\\d+)"
          target_label  = "__address__"
          replacement   = "$1:$2"
        }
      }


      pyroscope.scrape "pyroscope_scrape_cpu" {

        targets    = concat(discovery.relabel.kubernetes_pods_cpu_default_name.output)
        forward_to = [pyroscope.write.distributor.receiver]

        profiling_config {
          profile.memory {
            enabled = false
          }

          profile.process_cpu {
            enabled = true
          }

          profile.goroutine {
            enabled = false
          }

          profile.block {
            enabled = false
          }

          profile.mutex {
            enabled = false
          }

          profile.fgprof {
            enabled = false
          }
        }
      }

      discovery.relabel "kubernetes_pods_goroutine_default_name" {
        targets = concat(discovery.relabel.kubernetes_pods.output)

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scrape"]
          action        = "keep"
          regex         = "true"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port_name"]
          action        = "keep"
          regex         = ""
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_scheme"]
          action        = "replace"
          regex         = "(https?)"
          target_label  = "__scheme__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_path"]
          action        = "replace"
          regex         = "(.+)"
          target_label  = "__profile_path__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_goroutine_port"]
          action        = "replace"
          regex         = "(.+?)(?::\\d+)?;(\\d+)"
          target_label  = "__address__"
          replacement   = "$1:$2"
        }
      }


      pyroscope.scrape "pyroscope_scrape_goroutine" {

        targets    = concat(discovery.relabel.kubernetes_pods_goroutine_default_name.output)
        forward_to = [pyroscope.write.distributor.receiver]

        profiling_config {
          profile.memory {
            enabled = false
          }

          profile.process_cpu {
            enabled = false
          }

          profile.goroutine {
            enabled = true
          }

          profile.block {
            enabled = false
          }

          profile.mutex {
            enabled = false
          }

          profile.fgprof {
            enabled = false
          }
        }
      }

      discovery.relabel "kubernetes_pods_block_default_name" {
        targets = concat(discovery.relabel.kubernetes_pods.output)

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scrape"]
          action        = "keep"
          regex         = "true"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port_name"]
          action        = "keep"
          regex         = ""
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_scheme"]
          action        = "replace"
          regex         = "(https?)"
          target_label  = "__scheme__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_block_path"]
          action        = "replace"
          regex         = "(.+)"
          target_label  = "__profile_path__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_block_port"]
          action        = "replace"
          regex         = "(.+?)(?::\\d+)?;(\\d+)"
          target_label  = "__address__"
          replacement   = "$1:$2"
        }
      }

      pyroscope.scrape "pyroscope_scrape_block" {

        targets    = concat(discovery.relabel.kubernetes_pods_block_default_name.output)
        forward_to = [pyroscope.write.distributor.receiver]

        profiling_config {
          profile.memory {
            enabled = false
          }

          profile.process_cpu {
            enabled = false
          }

          profile.goroutine {
            enabled = false
          }

          profile.block {
            enabled = true
          }

          profile.mutex {
            enabled = false
          }

          profile.fgprof {
            enabled = false
          }
        }
      }

      discovery.relabel "kubernetes_pods_mutex_default_name" {
        targets = concat(discovery.relabel.kubernetes_pods.output)

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scrape"]
          action        = "keep"
          regex         = "true"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port_name"]
          action        = "keep"
          regex         = ""
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_scheme"]
          action        = "replace"
          regex         = "(https?)"
          target_label  = "__scheme__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_path"]
          action        = "replace"
          regex         = "(.+)"
          target_label  = "__profile_path__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_mutex_port"]
          action        = "replace"
          regex         = "(.+?)(?::\\d+)?;(\\d+)"
          target_label  = "__address__"
          replacement   = "$1:$2"
        }
      }


      pyroscope.scrape "pyroscope_scrape_mutex" {

        targets    = concat(discovery.relabel.kubernetes_pods_mutex_default_name.output)
        forward_to = [pyroscope.write.distributor.receiver]

        profiling_config {
          profile.memory {
            enabled = false
          }

          profile.process_cpu {
            enabled = false
          }

          profile.goroutine {
            enabled = false
          }

          profile.block {
            enabled = false
          }

          profile.mutex {
            enabled = true
          }

          profile.fgprof {
            enabled = false
          }
        }
      }

      discovery.relabel "kubernetes_pods_fgprof_default_name" {
        targets = concat(discovery.relabel.kubernetes_pods.output)

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scrape"]
          action        = "keep"
          regex         = "true"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port_name"]
          action        = "keep"
          regex         = ""
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_scheme"]
          action        = "replace"
          regex         = "(https?)"
          target_label  = "__scheme__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_path"]
          action        = "replace"
          regex         = "(.+)"
          target_label  = "__profile_path__"
          replacement   = "$1"
        }

        rule {
          source_labels = ["__address__", "__meta_kubernetes_pod_annotation_profiles_grafana_com_fgprof_port"]
          action        = "replace"
          regex         = "(.+?)(?::\\d+)?;(\\d+)"
          target_label  = "__address__"
          replacement   = "$1:$2"
        }
      }


      pyroscope.scrape "pyroscope_scrape_fgprof" {

        targets    = concat(discovery.relabel.kubernetes_pods_fgprof_default_name.output)
        forward_to = [pyroscope.write.distributor.receiver]

        profiling_config {
          profile.memory {
            enabled = false
          }

          profile.process_cpu {
            enabled = false
          }

          profile.goroutine {
            enabled = false
          }

          profile.block {
            enabled = false
          }

          profile.mutex {
            enabled = false
          }

          profile.fgprof {
            enabled = true
          }
        }
      }

      pyroscope.write "distributor" {
        endpoint {
          url = "http://10.252.184.237:32389"
        }
      }

  securityContext:
    privileged: true
    runAsGroup: 0
    runAsUser: 0

controller:
  hostPID: true
  podAnnotations:
    profiles.grafana.com/memory.scrape: "true"
    profiles.grafana.com/memory.port_name: "http-metrics"
    profiles.grafana.com/cpu.scrape: "true"
    profiles.grafana.com/cpu.port_name: "http-metrics"
    profiles.grafana.com/goroutine.scrape: "true"
    profiles.grafana.com/goroutine.port_name: "http-metrics"
